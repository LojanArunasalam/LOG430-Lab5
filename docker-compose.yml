services: 
  django-client: 
    container_name: client
    build: . 
    depends_on:
      - db
    ports:
        - "8888:8888"
    environment:
        - DATABASE_URL=postgresql://admin:admin@db:5432/postgres
        - DJANGO_SETTINGS_MODULE=client.settings
    expose: 
        - "8888"

  db:
    image: postgres:16
    container_name: db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes: 
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  
    expose: 
      - "5432"

  microservices_products:
    build: ./microservices/products
    container_name: microservices_products
    ports:
      - "8001:8001"
    volumes:
      - ./microservices/products:/app
    depends_on:
      - db_products
    environment:
      - DATABASE_URL_PRODUCTS=postgresql://admin:admin@db_products:5433/postgres
    expose:
      - "8001"
    networks:
      - api_network
  
  db_products:
    image: postgres:16
    container_name: db_products
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: postgres
    ports:
      - "5433:5432"
    expose: 
      - "5432"
    volumes: 
      - ./microservices/products/init_products.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - api_network
    
    
    
  microservices_warehouse:
    build: ./microservices/warehouse
    container_name: microservices_warehouse
    environment:
      - DATABASE_URL=postgresql://admin:admin@db_warehouse:5434/postgres
    depends_on:
      - db_warehouse
    ports:
      - "8002:8002"
    volumes:
      - ./microservices/warehouse:/app
    expose: 
      - "8002"
    networks:
      - api_network
    

  db_warehouse:
    image: postgres:16
    container_name: db_warehouse
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: postgres
    ports:
      - "5434:5432"
    expose: 
      - "5434"
    volumes: 
      - ./microservices/warehouse/init_warehouse.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - api_network

  kong-api_gateway: 
    image: kong:latest
    container_name: kong
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8008:8008"
      - "8444:8444"
    volumes:
      - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml
    environment:
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
    expose: 
      - "8000"
      - "8443"
      - "8008"
      - "8444"
    networks:
      - api_network


networks:
  api_network:
    driver: bridge